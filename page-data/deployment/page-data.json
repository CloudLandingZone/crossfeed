{"componentChunkName":"component---src-templates-documentation-page-js","path":"/deployment","result":{"data":{"markdownRemark":{"html":"<h2>Manual Deployment</h2>\n<p>Deployment is done automatically through GitHub Actions. Any code pushed to the <code>master</code> branch is automatically deployed to the Crossfeed staging site, and any code pushed to the <code>production</code> branch is automatically deployed to the production site.</p>\n<p>The following sections detail the manual deployment process for staging.</p>\n<h3>Infrastructure</h3>\n<p>Infrastructure is managed by Terraform. To deploy to staging, run:</p>\n<pre><code class=\"language-bash\">cd infrastructure\nmake init\nmake plan\nmake apply\n</code></pre>\n<h3>Backend</h3>\n<p>The backend API is managed by the Serverless Framework. To deploy, run:</p>\n<pre><code class=\"language-bash\">cd backend\nnpx sls create_domain --stage=staging\nnpx sls deploy --stage=staging\n</code></pre>\n<p>To change the environment variables used to build the backend, edit <code>env.yaml</code>. Most of these\nvariables are set through SSM variables (which should be set manually / through Terraform -- see below),\nbut some of these variables are hard-coded and configurable by just editing <code>env.yaml</code>.</p>\n<h3>Worker</h3>\n<p>Deploying the worker involves building the Docker image and pushing it to ECR:</p>\n<pre><code class=\"language-bash\">cd backend\nnpm run deploy-worker\n</code></pre>\n<h3>Frontend</h3>\n<p>Deploying the frontend involves building the React code, uploading it to an S3 bucket, then invalidating the Cloudfront cache:</p>\n<pre><code class=\"language-bash\">cd frontend\ncp stage.env .env\nnpm run build\naws s3 sync build/ s3://staging.crossfeed.cyber.dhs.gov/ --delete\naws cloudfront create-invalidation --distribution-id ELM2YU1N4NV9M --paths \"/index.html\"\n</code></pre>\n<p>You may need to change the values in <code>stage.env</code> or <code>prod.env</code> if you need to change the environment variables\nthat are used to build the frontend.</p>\n<h2>First-time Setup</h2>\n<p>To deploy this app for the first time, you need to do a couple of things:</p>\n<ul>\n<li>Set up a custom domain for the frontend and create an ACM certificate for it</li>\n<li>Generate a login.gov RSA key</li>\n<li>Set initial SSM variables</li>\n</ul>\n<h3>Generate login.gov RSA key</h3>\n<p>Run the following to generate a login.gov RSA key (preferably in a non-git directory outside of crossfeed!):</p>\n<pre><code class=\"language-bash\">openssl genrsa -out private.pem 2048\nopenssl req -newkey rsa:2048 -nodes -days 3650 -out csr.pem\nopenssl x509 -req -in csr.pem -out cert.pem -signkey private.pem\nnpm install -g pem-jwk\npem-jwk private.pem > private.jwk\n</code></pre>\n<p>Visit <a href=\"https://dashboard.int.identitysandbox.gov/\">the Login.gov sandbox dashboard</a> to create a login.gov application, providing <code>cert.pem</code> as the public certificate. Copy the contents of <code>private.jwk</code> to use as your <code>LOGIN_GOV_JWT_KEY</code> in the next step.</p>\n<h3>Set initial SSM variables</h3>\n<p>First, make sure you set the following SSM variables manually through the AWS Console (replace <code>staging</code> with <code>prod</code> as needed). Make sure these variables are set as \"SecureString\":</p>\n<ul>\n<li><code>/crossfeed/staging/DATABASE_USER</code></li>\n<li><code>/crossfeed/staging/DATABASE_PASSWORD</code></li>\n<li><code>/crossfeed/staging/APP_JWT_SECRET</code></li>\n<li><code>/crossfeed/staging/CENSYS_API_ID</code></li>\n<li><code>/crossfeed/staging/CENSYS_API_SECRET</code></li>\n<li><code>/crossfeed/staging/LOGIN_GOV_REDIRECT_URI</code></li>\n<li><code>/crossfeed/staging/LOGIN_GOV_BASE_URL</code></li>\n<li><code>/crossfeed/staging/LOGIN_GOV_JWT_KEY</code></li>\n<li><code>/crossfeed/staging/LOGIN_GOV_ISSUER</code></li>\n<li><code>/crossfeed/staging/WORKER_USER_AGENT</code></li>\n<li><code>/crossfeed/staging/WORKER_SIGNATURE_PUBLIC_KEY</code></li>\n<li><code>/crossfeed/staging/WORKER_SIGNATURE_PRIVATE_KEY</code></li>\n<li><code>/crossfeed/staging/REACT_APP_TERMS_VERSION</code></li>\n</ul>\n<h3>Create service-linked role for Amazon ES</h3>\n<p>You must also <a href=\"https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/slr-es.html#create-slr\">create a service-linked role for Amazon ES</a> (this only needs to be created once per AWS account):</p>\n<pre><code class=\"language-bash\">aws iam create-service-linked-role --aws-service-name es.amazonaws.com\n</code></pre>\n<h3>Use Terraform</h3>\n<p>Then, run <code>cp stage.config .env</code> and change the variables in <code>.env</code> to use a bucket you have access to to store state.</p>\n<p>Make sure you configure the default AWS profile using <code>aws configure</code> , or set the <code>AWS_PROFILE</code> environment variable in <code>.env</code>.</p>\n<p>Then run:</p>\n<pre><code class=\"language-bash\">npm i -g dotenv-cli\nmake init\nmake plan\nmake apply\n</code></pre>","frontmatter":{"title":"Deployment","sidenav":"contributing"},"fields":{"name":"deployment"}}},"pageContext":{"name":"deployment"}},"staticQueryHashes":["1824138477","561523179","63159454"]}