{"componentChunkName":"component---src-templates-documentation-page-js","path":"/setup","result":{"data":{"markdownRemark":{"html":"<h2>Quickstart</h2>\n<ol>\n<li>\n<p>Copy root <code>dev.env.example</code> file to a <code>.env</code> file, and change values as desired:</p>\n<ul>\n<li><code>cp dev.env.example .env</code></li>\n</ul>\n</li>\n<li>\n<p>Build the crossfeed-worker Docker image</p>\n<ul>\n<li><code>cd backend &#x26;&#x26; npm run build-worker</code></li>\n</ul>\n</li>\n<li>\n<p>Start entire environment from root using Docker Compose</p>\n<ul>\n<li><code>docker-compose up --build</code></li>\n</ul>\n</li>\n<li>\n<p>Generate DB schema:</p>\n<ul>\n<li><code>cd backend &#x26;&#x26; npm run syncdb</code></li>\n<li>(run <code>npm run syncdb -- -d dangerouslyforce</code> to drop and recreate)</li>\n</ul>\n</li>\n<li>Navigate to <a href=\"http://localhost\">localhost</a> in a browser.</li>\n<li>\n<p>Hot reloading for source files is enabled, but after changes to non-source code files stopping and starting docker compose is required. The following are examples of changes that will require restarting the environment:</p>\n<ul>\n<li>frontend or backend dependency changes</li>\n<li>backend <code>serverless.yml</code> or <code>env.yml</code></li>\n<li>environment variables in root <code>.env</code></li>\n</ul>\n</li>\n<li>Install <a href=\"https://www.robinwieruch.de/how-to-use-prettier-vscode\">Prettier</a> in your dev environment to format code on save.</li>\n</ol>\n<p>If you want to view a local version of Kibana, you should first comment out the \"kib\" section of <code>docker-compose.yml</code> and then navigate to <a href=\"http://localhost:5601\">http://localhost:5601</a>.</p>\n<h3>Running the scheduler lambda function locally</h3>\n<p>The scheduler lambda function is set to run on a 5-minute interval when deployed.</p>\n<p>When running locally, the scheduler function runs every 1 minute, for convenience. To run it manually, click on the \"Manually run scheduler\" button on the Scans page.</p>\n<p>You can check scheduler logs locally by checking the backend container logs.</p>\n<h3>Running tests</h3>\n<p>To run tests, first make sure you have already started crossfeed with <code>docker-compose</code>. Then run:</p>\n<pre><code class=\"language-bash\">cd backend\nnpm test\n</code></pre>\n<p>To update snapshots, run <code>npm test -- -u</code>.</p>\n<p>To view a code coverage report (a minimum code coverage threshold is checked in CI), run <code>npm test -- --collectCoverage</code>.</p>\n<p>You can then view a HTML coverage report in the <code>coverage/lcov-report</code> directory.</p>\n<p>To run Python tests for some worker code, you need to run:</p>\n<pre><code class=\"language-bash\">pip install -r worker/requirements.txt\npytest\n</code></pre>\n<h2>Fargate worker</h2>\n<p>In order to run scans locally or work on scanning infrastructure,\nyou will need to set up the Fargate worker and rebuild it periodically\nwhen worker code changes.</p>\n<h3>Running locally</h3>\n<p>Each time you make changes to the worker code, you should run:</p>\n<pre><code class=\"language-bash\">npm run build-worker\n</code></pre>\n<p>To run the scheduler, click on \"Manually run scheduler\" on the Scans page.</p>\n<p>You can then run <code>docker ps</code> or ( <code>docker ps -a | head -n 3</code> ) to view running / stopped Docker containers,\nand check their logs with <code>docker logs [containername]</code> .</p>\n<h3>Publishing</h3>\n<p>Run:</p>\n<pre><code class=\"language-bash\">npm run deploy-worker\n</code></pre>\n<p>If the <code>worker_ecs_repository_url</code> output from Terraform changes, you will need to modify <code>./src/tools/deploy-worker.sh</code>.</p>\n<h3>Generating censys types</h3>\n<p>To re-generate the censysIpv4 type file, run:</p>\n<pre><code class=\"language-bash\">npm run codegen\n</code></pre>\n<h2>Documentation</h2>\n<p>The documentation files are stored in the <code>docs</code> directory and served from a Jekyll site. To work on this, you should first comment out the \"docs\" section of <code>docker-compose.yml</code> and then run:</p>\n<pre><code class=\"language-bash\">docker-compose up docs\n</code></pre>\n<p>You can then open up [http://localhost:4000][http://localhost:4000] in your browser.</p>\n<p>See <a href=\"https://github.com/18F/uswds-jekyll\">uswds-jekyll</a> for more information on theme customizations that can be done.</p>\n<h2>Matomo</h2>\n<p><a href=\"https://matomo.org/\">Matomo</a> is an open source analytics platform. We host an instance of Matomo as part of Crossfeed to collect analytics\non its usage.</p>\n<p>When running Matomo for the first time locally, you must run <code>./setup-matomo.sh</code>.</p>\n<p>You can access Matomo by clicking on the \"Matomo\" button from the \"My Account\" page. Click\nthrough the original setup (keep the default values for database connection, etc.),\nthen set the superuser username and password to \"root\" and \"password\" (for development only, in production generate a random password).</p>","frontmatter":{"title":"Development Setup","sidenav":"contributing"},"fields":{"name":"setup"}}},"pageContext":{"name":"setup"}},"staticQueryHashes":["1824138477","561523179","63159454"]}